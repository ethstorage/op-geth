// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// faucet.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6d\x93\xdb\x36\x92\xfe\x3c\xfe\x15\x1d\x9e\xbd\x92\xce\x43\x52\x33\x63\x7b\x7d\x12\xa9\x94\xd7\xfb\x72\xbe\xba\x4b\x52\xb1\x53\xb9\xad\x6c\xea\x0a\x24\x5b\x22\x3c\x20\xc0\x00\xa0\x34\xca\x94\xfe\xfb\x55\x03\x24\x45\xbd\xcc\xc4\x59\xfb\xaa\xce\x1f\xc6\x24\xd0\xe8\x6e\x74\x3f\x8d\xee\x86\x98\x7c\xf5\xe7\x6f\xdf\x7e\xf8\xfb\x77\x7f\x81\xd2\x56\x62\xf1\x24\xa1\xff\x40\x30\xb9\x4a\x03\x94\xc1\xe2\xc9\x45\x52\x22\x2b\x16\x4f\x2e\x2e\x92\x0a\x2d\x83\xbc\x64\xda\xa0\x4d\x83\xc6\x2e\xc3\xd7\xc1\x7e\xa2\xb4\xb6\x0e\xf1\x97\x86\xaf\xd3\xe0\xbf\xc3\x1f\xde\x84\x6f\x55\x55\x33\xcb\x33\x81\x01\xe4\x4a\x5a\x94\x36\x0d\xde\xfd\x25\xc5\x62\x85\x83\x75\x92\x55\x98\x06\x6b\x8e\x9b\x5a\x69\x3b\x20\xdd\xf0\xc2\x96\x69\x81\x6b\x9e\x63\xe8\x5e\x2e\x81\x4b\x6e\x39\x13\xa1\xc9\x99\xc0\xf4\x2a\x58\x3c\x21\x3e\x96\x5b\x81\x8b\xfb\xfb\xe8\x1b\xb4\x1b\xa5\x6f\x77\xbb\x19\xbc\x69\x6c\x89\xd2\xf2\x9c\x59\x2c\xe0\xaf\xac\xc9\xd1\x26\xb1\xa7\x74\x8b\x04\x97\xb7\x50\x6a\x5c\xa6\x01\xa9\x6e\x66\x71\x9c\x17\xf2\xa3\x89\x72\xa1\x9a\x62\x29\x98\xc6\x28\x57\x55\xcc\x3e\xb2\xbb\x58\xf0\xcc\xc4\x76\xc3\xad\x45\x1d\x66\x4a\x59\x63\x35\xab\xe3\x9b\xe8\x26\xfa\x63\x9c\x1b\x13\xf7\x63\x51\xc5\x65\x94\x1b\x13\x80\x46\x91\x06\xc6\x6e\x05\x9a\x12\xd1\x06\x10\x2f\xfe\x39\xb9\x4b\x25\x6d\xc8\x36\x68\x54\x85\xf1\x8b\xe8\x8f\xd1\xd4\x89\x1c\x0e\x3f\x2e\x95\xc4\x9a\x5c\xf3\xda\x82\xd1\xf9\x27\xcb\xfd\xf8\x4b\x83\x7a\x1b\xdf\x44\x57\xd1\x55\xfb\xe2\xe4\x7c\x34\xc1\x22\x89\x3d\xc3\xc5\x67\xf1\x0e\xa5\xb2\xdb\xf8\x3a\x7a\x11\x5d\xc5\x35\xcb\x6f\xd9\x0a\x8b\x4e\x12\x4d\x45\xdd\xe0\x17\x93\xfb\x90\x0f\x3f\x1e\xbb\xf0\x4b\x08\xab\x54\x85\xd2\x46\x1f\x4d\x7c\x1d\x5d\xbd\x8e\xa6\xdd\xc0\x29\x7f\x27\x80\x9c\x46\xa2\x2e\xa2\x35\x6a\x42\xae\x08\x73\x94\x16\x35\xdc\xd3\xe8\x45\xc5\x65\x58\x22\x5f\x95\x76\x06\x57\xd3\xe9\xb3\xf9\xb9\xd1\x75\xe9\x87\x0b\x6e\x6a\xc1\xb6\x33\x58\x0a\xbc\xf3\x43\x4c\xf0\x95\x0c\xb9\xc5\xca\xcc\xc0\x73\x76\x13\x3b\x27\xb3\xd6\x6a\xa5\xd1\x98\x56\x58\xad\x0c\xb7\x5c\xc9\x19\x21\x8a\x59\xbe\xc6\x73\xb4\xa6\x66\xf2\x64\x01\xcb\x8c\x12\x8d\xc5\x23\x45\x32\xa1\xf2\x5b\x3f\xe6\xa2\x79\xb8\x89\x5c\x09\xa5\x67\xb0\x29\x79\xbb\x0c\x9c\x20\xa8\x35\xb6\xec\xa1\x66\x45\xc1\xe5\x6a\x06\xaf\xea\x76\x3f\x50\x31\xbd\xe2\x72\x06\xd3\xfd\x92\x24\xee\xcc\x98\xc4\xfe\xe0\x7a\x72\x91\x64\xaa\xd8\x3a\x1f\x16\x7c\x0d\xb9\x60\xc6\xa4\xc1\x91\x89\xdd\x81\x74\x40\x40\xe7\x10\xe3\xb2\x9b\x3a\x98\xd3\x6a\x13\x80\x13\x94\x06\x5e\x89\x30\x53\xd6\xaa\x6a\x06\x57\xa4\x5e\xbb\xe4\x88\x9f\x08\xc5\x2a\xbc\xba\xee\x26\x2f\x92\xf2\xaa\x63\x62\xf1\xce\x86\xce\x3f\xbd\x67\x82\x45\xc2\xbb\xb5\x4b\x06\x4b\x16\x66\xcc\x96\x01\x30\xcd\x59\x58\xf2\xa2\x40\x99\x06\x56\x37\x48\x38\xe2\x0b\x18\x1e\x7f\x0f\x9c\x7e\xe5\x55\xa7\x57\x5c\xf0\x75\xbb\xad\xc1\xe3\xd1\x0e\x1f\xde\xc4\x6b\x68\x1f\xd4\x72\x69\xd0\x86\x83\x3d\x0d\x88\xb9\xac\x1b\x1b\xae\xb4\x6a\xea\x7e\xfe\x22\x71\xa3\xc0\x8b\x34\x68\xb4\x08\xda\xe3\xdf\x3d\xda\x6d\xdd\x9a\x22\xe8\x37\xae\x74\x15\x92\x27\xb4\x12\x01\xd4\x82\xe5\x58\x2a\x51\xa0\x4e\x83\xf7\x2a\xe7\x4c\x80\xf4\x7b\x86\x1f\xbe\xff\x4f\x68\x5d\xc6\xe5\x0a\xb6\xaa\xd1\xf0\xe3\xfb\xb7\xc0\x8a\x82\x90\x1a\x45\x51\x10\xef\x95\x70\xb8\x3d\x55\x33\xcc\xac\xdc\xab\x7a\x91\x64\x8d\xb5\xaa\x27\xcc\xac\x84\xcc\xca\xb0\xc0\x25\x6b\x84\x85\x42\xab\xba\x50\x1b\x19\x5a\xb5\x5a\x51\x96\xf3\x1b\xf0\x8b\x02\x28\x98\x65\xed\x54\x1a\x74\xb4\x9d\xff\x98\xa9\x55\xdd\xd4\xad\x07\xfd\x20\xde\xd5\x4c\x16\x58\x90\xbf\x85\xc1\x60\xf1\x37\xbe\x46\xa8\x90\xf6\x71\x71\x0c\x86\x9c\x69\xb4\xe1\x90\xe5\x09\x24\x92\xd8\xab\xe2\x37\x04\xed\xbf\xa4\x11\x1d\xa7\x7e\x03\x15\xca\x06\x0e\xde\x42\x4d\x27\x4a\xb0\xb8\xbf\xd7\x4c\xae\x10\x9e\xf2\xe2\xee\x12\x9e\xb2\x4a\x35\xd2\xc2\x2c\x85\xe8\x8d\x7b\x34\xbb\xdd\x01\x77\x80\x44\xf0\x45\xc2\x1e\x03\x36\x28\x99\x0b\x9e\xdf\xa6\x81\xe5\xa8\xd3\xfb\x7b\x62\xbe\xdb\xcd\xe1\xfe\x9e\x2f\xe1\x69\xf4\x3d\xe6\xac\xb6\x79\xc9\x76\xbb\x95\xee\x9e\x23\xbc\xc3\xbc\xb1\x38\x9e\xdc\xdf\xa3\x30\xb8\xdb\x99\x26\xab\xb8\x1d\x77\xcb\x69\x5c\x16\xbb\x1d\xe9\xdc\xea\xb9\xdb\x41\x4c\x4c\x65\x81\x77\xf0\x34\xfa\x0e\x35\x57\x85\x01\x4f\x9f\xc4\x6c\x91\xc4\x82\x2f\xda\x75\x87\x46\x8a\x1b\xb1\x47\x4b\x4c\x70\xe9\x11\xee\x02\xc6\xa9\x3a\xd4\xf4\x0c\xfe\x57\x61\xaf\x7d\x8b\x06\xc3\x2d\xde\xe2\x36\x0d\xee\xef\x87\x6b\xdb\xd9\x9c\x09\x91\x31\xb2\x8b\xdf\x5a\xbf\xe8\x57\x24\x94\xae\xb9\x71\xc5\xd4\xa2\xd3\x60\xaf\xf6\x27\x06\xf4\xd1\x91\x65\x55\x3d\x83\x9b\xeb\xc1\x79\x75\x2e\xd6\x5f\x1d\xc5\xfa\xcd\x59\xe2\x9a\x49\x14\xe0\xfe\x86\xa6\x62\xa2\x7b\x6e\x63\x65\x10\xff\xc7\x8b\x42\x3a\x9d\x7b\xd5\xfa\x53\x7e\x3a\x07\xb5\x46\xbd\x14\x6a\x33\x03\xd6\x58\x35\x87\x8a\xdd\xf5\x99\xee\x66\x3a\x1d\xea\x4d\x45\x20\xcb\x04\xba\x73\x45\xe3\x2f\x0d\x1a\x6b\xfa\x53\xc4\x4f\xb9\xbf\x74\x98\x14\x28\x0d\x16\x47\xd6\x20\x89\x64\x5a\x47\x35\x70\x7d\x6f\xcc\xb3\xba\x2f\x95\xea\x93\xc7\x50\x8d\x96\xf5\x20\xcf\x05\x8b\xc4\xea\x3d\xdd\x45\x62\x8b\xdf\x75\xf8\x13\x14\x32\x66\xf0\xe1\x04\xe0\x0f\x35\x32\x80\xcb\xb4\xae\xbc\x20\xdc\xfa\xc4\x6b\x92\xd8\x16\x9f\x21\xbf\x44\xa6\x6d\x86\xcc\x7e\x8a\x02\xcb\x46\x16\x66\xaf\xc0\x8f\xef\xdf\x7e\xae\xf8\x46\xf2\x35\x6a\xc3\xed\xf6\x53\xe5\x63\xb1\x57\xc0\xbf\x1f\xaa\x90\xc4\x56\x3f\xee\xef\xe1\xcb\x17\x0a\xb0\xdf\x2a\x08\x6e\x16\xff\xae\x36\x50\x28\x34\x60\x4b\x6e\x80\x52\xdb\xd7\x49\x5c\xde\xf4\x24\xf5\xe2\x03\x4d\x50\x6a\x5b\xba\xb4\x0e\xdc\x80\x6e\xa4\xcb\x7a\x4a\x82\x2d\xf1\xb0\x14\x68\x13\x64\x04\x1f\x14\x95\x53\x6b\x94\x16\x2a\x26\x78\xce\x55\x63\x80\xe5\x56\x69\x03\x4b\xad\x2a\xc0\xbb\x92\x35\xc6\x12\x23\x0a\x60\xb6\x66\x5c\x38\x34\x3b\x77\x82\xd2\xc0\xf2\xbc\xa9\x1a\x2a\x07\xe5\x0a\x50\xaa\x66\x55\x3a\x4d\xac\x02\x9f\x18\x84\x92\xab\x5e\x1b\x53\xb3\x0a\x98\xb5\x2c\xbf\x35\x97\xd0\x45\x25\x30\x8d\x60\x39\x16\xb4\x2a\x57\x55\xa5\x24\xdc\xe8\x02\x6a\xa6\xed\x16\xcc\x61\x56\x67\x79\xee\xb2\x4c\x04\x6f\xe4\x56\x49\x84\x92\xad\x9d\x7e\xf0\xc1\x17\xf2\xa4\xd5\x5f\x59\x8e\x99\x52\x3d\x35\x54\x6c\xdb\x89\x6b\x75\xdf\x70\x5b\x72\x6f\x9c\x1a\x75\x45\x4b\x0b\x10\xbc\xe2\xd6\x44\x49\x5c\xef\x4f\xb4\x7d\x6e\x14\x61\xa9\x34\xff\x95\x4a\x0a\x31\x3c\xbe\xec\x51\x70\x77\x67\x93\xf3\xb8\xc0\xa5\x9d\xc1\x0b\x7f\x36\x1d\x63\xb8\xed\x3d\xce\x01\xb8\xe3\xe9\x7a\x3a\x3a\xf0\x67\x70\xe3\x0b\x49\x9f\xc8\x0b\x3b\xd0\xa0\x38\x82\x99\x17\xfa\xfa\x75\x7d\xd7\xeb\xd1\x57\xa3\xd3\x9e\x09\xf9\xff\xd0\x28\x6b\xde\x9b\xf1\x12\x2a\x76\x8b\xc0\x20\x61\x47\xbd\x69\xab\xb4\xeb\x6c\xb8\xeb\xcc\x63\xbb\x41\xb4\x5f\x53\xd8\xa6\xdf\x7b\x86\x5c\xae\x9e\x5d\x4f\x3d\x1e\xe9\x81\xd8\x3f\xbb\x9e\x72\x69\xd5\xb3\xeb\xe9\xf4\x6e\xfa\x89\xff\x9e\x5d\x4f\x95\x7c\x76\x3d\xb5\x25\x3e\xbb\x9e\x3e\xbb\xbe\x19\x22\xd9\x8f\xfc\xf8\xfe\x2d\x11\xa0\x21\x41\x1d\xb6\x03\xb0\x4c\xaf\xd0\xa6\xc1\xff\xb0\x4c\x35\x76\x96\x09\x26\x6f\x83\x85\xd3\x94\x12\xbd\x03\xc0\x49\x51\x08\x35\x33\x04\x04\xd2\xd3\x61\xa3\xbd\x7b\x30\x30\x36\x8d\xd6\xaa\x91\x94\x8b\x80\x76\xea\x62\x52\x8e\x08\x5b\x64\x8e\x49\x94\x64\x3a\x5e\xbc\x55\xf5\x36\x74\x4c\xdc\xf2\x13\xe3\x99\xa6\xae\x95\xb6\xd1\xd0\x88\x8c\xfa\x0e\x81\x26\x7e\x3d\x7d\xf9\xfa\xd5\xa3\x9a\x1b\xaa\x6a\x9d\xfa\xbd\x86\x2c\x53\x6b\x04\x5f\x43\x67\xea\x0e\x98\x2c\x60\xc9\x35\x02\xdb\xb0\xed\x57\x49\x5c\xb8\x8e\xe7\xf3\xb1\xba\x6c\x63\xea\xff\x15\x58\xbb\x40\xbf\x84\xba\xc9\x04\x37\x25\x30\x90\xb8\x81\xc4\x58\xad\xe4\x6a\xe1\x46\x73\x6a\x01\xdd\x2b\xd4\xca\xd8\x07\x3c\x8f\x55\x86\x45\x71\xc6\xf7\x5f\xca\xf5\x9b\xcd\x26\xea\x8c\xe8\xfc\x5e\xa2\xa8\x63\x3a\xef\x1a\xc9\xed\x36\xf6\x71\xa3\x64\xfc\x35\x2f\xd2\xeb\xd7\xd7\xaf\x5e\x5d\xbf\xf8\xb7\xd7\x2f\x5f\x5e\xbf\x7e\xf1\xf2\x21\x50\xd0\x7e\x3e\x13\x13\xbe\x6e\xfd\x46\x51\x83\xd8\x17\xad\x0e\x29\x5d\xad\x44\xd9\xb8\xa0\x9a\x5f\x07\xff\x34\x7a\x1a\x49\x25\x47\xc8\xc4\xd9\x6a\xe1\x77\xe2\xe7\x11\xc5\x3e\x13\x53\x1d\x6e\x08\x22\xaa\xb1\xb4\xc1\xae\x6b\xe6\x4a\xf6\x38\xba\x04\xc3\xab\x5a\x6c\x21\xdf\xfb\xfc\x04\x50\x0f\x7a\xe3\x37\xf1\x74\xe8\x2f\x8f\x2e\x97\xe3\x2b\x55\x20\x65\x77\xd3\x98\x1c\x6b\x77\x93\x4a\x39\xf3\x4f\xdb\x5f\x99\xb4\x5c\x62\x97\x5b\x23\xf8\x56\x8a\x2d\x34\x06\x61\xa9\x34\x14\x98\x35\xab\x95\x2b\x07\x34\xd4\x9a\xaf\x99\xc5\x2e\xa1\x9a\x16\x0e\x3d\x1a\x06\x3d\x04\x15\x36\x62\x50\x67\xfc\x5d\x35\x90\x33\x09\x56\xb3\xfc\xd6\x87\x48\xa3\x35\x85\x48\x8d\x7e\x37\x7d\x4a\xcf\x50\xa8\x8d\x23\xf1\xfb\x5e\x72\x14\x2e\xbf\x1b\x44\x28\xd5\x06\xaa\x26\x77\x41\x48\xf9\xdb\x6d\x62\xc3\xb8\x85\x46\x5a\x2e\xbc\x29\x6d\xa3\x25\x55\x03\x78\x90\x8f\x4f\xba\xac\x04\xab\xc5\x87\x12\xcf\x94\x3e\x7d\x7f\x04\x1a\xdf\x7a\x72\xa8\xb5\xb2\x98\x93\x2f\x81\xad\x18\x97\x86\x3c\xe2\x32\x3e\x56\x9f\xd0\x3f\xf5\x4f\xed\xc3\xfe\x16\xd0\x4d\xc7\x31\xfc\x4d\xa8\x8c\x09\x58\x13\xc6\x33\x41\x45\x9b\x82\x52\xd1\xd6\x07\xd6\x32\x96\xd9\xc6\x80\x5a\xba\x51\xaf\x39\xad\x5f\x33\x4d\x1e\xc4\xaa\xb6\x90\xb6\x77\x58\x34\x66\x50\xaf\xdb\x9b\x39\x7a\xa5\x1e\xf9\x60\xbe\xb7\x7a\x0a\x3f\xfd\x3c\x7f\xd2\xaa\xf2\x67\x5c\x3a\x48\x10\xb4\xfd\x96\x6d\xc9\x2c\xe4\x1a\x99\x45\x03\xb9\x50\xa6\xd1\x5e\x43\x6a\xf4\x81\xb4\xec\x38\x75\x9c\x69\xa2\x76\xd2\x3a\x26\xe3\x92\x99\x72\xd2\x5e\xc1\x69\x74\x5e\xea\xe7\xba\xf1\x0b\x42\xdd\x98\x18\xf0\x74\x3a\x07\x9e\x74\x7c\x23\x81\x72\x65\xcb\x39\xf0\xe7\xcf\x7b\xe2\x0b\xbe\x84\x71\x47\xf1\x13\xff\x39\xb2\x77\x11\x49\x81\x34\x85\xa1\x34\x27\xb0\xe5\x63\x6a\xc1\x73\x1c\xf3\x4b\xb8\x9a\xcc\xbb\xd9\x4c\x23\xbb\xed\xde\x5a\x3f\xfa\xff\xdc\xdf\xdd\xfc\xd0\x32\xce\xf8\x07\xb6\xf1\x5d\xb6\x01\x06\x2b\x6e\x2c\x34\x5a\x40\x1b\xc3\xde\x05\xbd\x43\x1c\xdd\xd0\x2a\x27\xb8\x6c\x1f\x5a\x4c\x75\x5b\xf0\x6c\x22\x83\xb2\x18\xff\xc7\xfb\x6f\xbf\x89\x8c\xd5\x5c\xae\xf8\x72\x3b\xbe\x6f\xb4\x98\xc1\xd3\x71\xf0\x2f\x8d\x16\xc1\xe4\xa7\xe9\xcf\xd1\x9a\x89\x06\x2f\x9d\xbf\x67\xee\xef\x89\x94\x4b\x68\x1f\x67\x70\x28\x70\x37\x99\xcc\xcf\xdf\x48\x0c\x2e\x50\x34\x1a\xb4\x63\x22\xec\x81\x7f\x6c\x23\x06\x15\xda\x52\xb9\xd0\xd5\x98\x2b\x29\x31\xb7\xd0\xd4\x4a\xb6\x26\x01\xa1\x8c\xd9\x03\xb1\xa3\x48\x4f\x41\xd1\xd2\xa7\x2e\x41\xff\x88\xd9\x7b\x95\xdf\xa2\x1d\x8f\xc7\x1b\x2e\x0b\xb5\x89\x84\xf2\xa7\x6c\x44\x41\xaa\x72\x25\x20\x4d\x53\x68\xd3\x67\x30\x81\xaf\x21\xd8\x18\x4a\xa4\x01\xcc\xe8\x91\x9e\x26\xf0\x1c\x8e\x97\x97\x94\xe3\x9f\x43\x10\xb3\x9a\x07\x13\x1f\x0e\x9d\xe1\x95\xac\xd0\x18\xb6\xc2\xa1\x82\xae\x03\xea\x41\x46\xfb\xa8\xcc\x0a\x52\x70\x0e\xaa\x99\x36\xe8\x49\x22\xea\xb8\x3b\xb4\x11\x66\x1d\x59\x9a\x82\x6c\x84\xd8\x83\xd4\x07\xc5\xbc\x83\xdf\x01\x79\xe4\xd3\xcc\x57\x69\x0a\xd4\x80\x92\x89\x8b\xfd\x4a\x72\xbe\x6f\x94\x27\x11\xe5\x85\xfd\x8a\xc9\x7c\x88\xe6\x03\x6e\x58\xfc\x16\x3b\x2c\x8e\xf9\x61\xf1\x00\x43\xd9\x54\x19\xea\xc7\x18\xfa\x9b\x84\x96\x9f\x33\xce\x3b\x69\x07\x6b\x2f\xe1\xea\xd5\xe4\x01\xee\xa8\xb5\x7a\x90\xb9\x54\x76\x3b\xbe\x17\x6c\x4b\xe5\x0d\x8c\xac\xaa\xdf\xba\xd6\x7f\x74\xe9\x72\xe4\x0c\x7a\x0e\x97\xee\x5a\x75\x06\x23\xf7\x46\xf3\xbc\x42\xb7\xea\xe5\x74\x3a\xbd\x84\xee\xb7\x88\x3f\x31\x0a\x1b\xdd\xe0\xee\x01\x7d\x4c\x93\xe7\x94\xa9\x3f\x47\xa3\x96\x47\xaf\x53\xfb\xfe\x19\x5a\xf5\xa7\xf9\x81\x5a\xf0\x87\x3f\xc0\xc9\xec\x21\xf0\xe2\x18\xfe\x8b\x51\x8b\x2c\x84\xeb\xeb\x5d\x3b\xdf\xd3\x57\xdc\x18\xd7\x28\x1b\x28\x94\xc4\x76\xcd\xef\x3b\xa8\x4f\x74\x6c\xc9\x60\x01\xd3\x63\x05\xe9\x00\x1b\x1c\xe4\x67\xce\xf7\x01\xdf\xc3\xa3\xfb\x62\x37\x94\x77\xb0\x92\x57\x08\x5f\xa5\x10\x04\xc3\xc5\x27\x14\x44\xd0\x33\xbb\x30\x68\x3f\x78\x5f\x8c\xdb\x7c\x76\x2e\xdb\x4c\x2e\xe1\x66\x3a\x9d\x4e\x4e\x94\xd8\xed\xcd\xfb\xa6\xa6\x42\x07\x98\xdc\xba\x43\xac\xb7\xad\x2b\xf5\xa8\x68\xa1\x43\x48\x40\xae\x84\xf0\x55\x46\xbb\x94\x0c\xdc\x5e\x6c\xa4\x10\x5e\xcd\xcf\xe4\xbd\x81\x25\x07\x5b\x3b\x76\xcf\x19\xdb\x1f\xbb\xe8\xd0\x66\x47\xc4\xe1\xd5\x81\x53\x0e\xfc\x75\xde\x31\x17\xbd\xde\x7c\x6f\xd1\x23\x77\xed\xfd\x75\x6c\xb3\x81\xfe\x9e\xcf\xf3\xab\x4f\xdc\x46\x3f\x5d\x37\xa6\x1c\x1f\x29\x3a\x99\x9f\xfa\xe6\x9d\x45\x4d\x75\xad\xa2\x24\x43\xbe\xa0\xba\x5d\xe3\x89\x4b\x5c\x71\xad\x31\xd4\x28\x0b\xd4\x5d\x11\xe0\x6b\x71\x2a\xd9\x0e\x5c\xe6\x1b\xc0\x21\x9c\x06\x3b\x3a\xb1\xed\x1c\x38\x2c\xa8\x30\x03\x1e\x86\x83\xbd\xb8\x4a\x4a\x49\x04\x00\x38\x8a\x04\x87\xd6\x03\xb8\x12\x31\x0a\x56\x1b\x2c\x20\x05\xff\xfb\xf0\x78\x12\x35\x92\xdf\x8d\x27\x61\xfb\x7e\xcc\xa3\x9b\x9f\xf7\x6d\x5d\xa7\xfb\xf3\x14\x82\xc4\x6a\xe0\x45\x3a\x0a\xe0\xf9\xb9\x38\xa4\x64\x39\x5a\xec\x35\x18\x2e\x05\x48\x6c\xb1\x70\x97\x94\xbe\xc3\xfa\x47\x90\xb1\xfc\x76\xe5\xfa\x97\x19\x55\x48\xe3\x13\xb6\x6c\xcd\x2c\xd3\x8e\xeb\x64\x0e\x7b\xf2\xb6\xb3\xcb\xc9\x43\x73\xf0\x2d\xa4\xbb\x0b\x85\xfe\x0e\xdf\xbd\x65\x4a\x17\xa8\x43\xcd\x0a\xde\x98\x19\xbc\xa8\xef\xe6\xff\xe8\x7e\xe3\x70\x37\xb6\x8f\xaa\x5a\x6b\x5c\x9c\x68\xd4\x5e\x03\x3e\x87\x20\x89\x89\xe0\xb7\xd8\xf4\x9b\x1d\xfe\x2e\x0d\x67\xee\xa5\xa1\xff\xd5\xb8\x1d\xaf\x78\x51\x08\x24\x85\xf7\xec\x29\x22\xc9\xff\xc3\xb8\x3a\x14\x09\xed\x85\xf4\x7e\xcd\x0e\x50\x18\x7c\x64\x41\x7f\xb7\x3d\x22\x00\x84\xb4\x65\xee\x6c\xde\xb6\xc7\x6e\x58\x8f\x9c\x2d\xda\xaf\x0c\x8a\x46\xbb\x12\x69\x1c\xb6\x00\xbb\x84\x91\xa1\x92\xad\x30\xa3\x49\x54\x36\x15\x93\xfc\x57\x1c\x53\x72\x9a\x78\x5b\xb9\xcb\xf2\xe0\xf4\x5c\x3e\x51\x66\x7f\x8b\x3d\xea\x12\xdd\xa8\x35\xe2\xa8\xf3\xee\x8b\x7d\x37\x3e\x83\xe9\x7c\xf4\x3b\x2d\x74\x5e\x4a\x98\x31\x0d\xc3\x97\xb0\xcb\xc0\xa0\x15\x49\xef\xe6\x32\xa6\x47\xfe\xea\xc1\x95\xd5\x52\x6d\xd2\xd1\xcd\xb4\x57\xd2\x3b\xda\xf9\x79\xd4\x62\xed\xc4\x19\xa4\x65\x17\x9a\x0b\xb8\x99\x7e\x09\x6d\xfd\xfd\xc5\xd1\x0e\xac\xe6\x35\x16\xc0\x72\xcb\xd7\xf8\x7f\xb0\x91\x2f\x60\xe4\xdf\xad\x22\xe1\xb0\x33\x9e\x83\xe9\x81\xbe\x34\xdb\xdb\xf6\x5f\x29\xde\x20\x76\x16\x7e\x0e\xc1\xd9\x8d\x3c\x88\xc4\x23\xc2\xa3\xd0\x7e\x38\xee\xdd\xaf\x3f\xc1\x71\x62\xa1\x92\xb7\xff\xf5\x70\x12\x95\xb6\x12\xe3\x20\xb1\xee\xfb\x11\xd2\xb9\xe7\xe0\x18\xf8\xe1\xc3\xba\x6e\x77\xd8\x7f\x50\xdb\x8d\x47\xed\x11\x0c\x2a\x94\xbe\x85\xea\xca\x11\xd8\xed\x3f\xb3\x89\x63\x78\x6f\x99\xb6\xc0\xe0\x87\x77\xd0\xd4\x05\xb3\x94\xc2\x14\x50\x92\xf4\xbf\x65\x74\xdf\xe1\x64\x4c\x1b\x58\x2a\xbd\x61\xba\x68\xaf\x55\x6c\x89\x5b\xf7\x5b\x4b\x57\xff\x19\xb4\xef\xe8\x14\x5b\x33\x31\x3e\x69\xd7\x9e\x8e\x47\xd1\xd0\xe5\xa3\x49\x84\x2c\x2f\x4f\x09\x5d\xc6\xea\xe5\xa6\xf0\x8d\xeb\x03\xc6\x4f\xc7\xb6\xe4\x66\x12\x31\x6b\xf5\x78\x74\x00\x86\xd1\x84\xfc\x7a\x35\xe8\xa4\xfa\xe5\xc9\x41\x58\x3d\xc6\x63\x5f\x51\xf7\xd5\x40\x47\x9e\x1b\x33\xf6\xb8\x1a\x5d\x0e\x78\x1f\xc2\x6a\xf4\x6c\xd4\x3b\x6a\x1f\xde\xfb\x7d\xa4\x67\x35\x39\x60\x3d\xa2\x28\x1b\x9d\x88\x67\x45\xf1\x96\xe2\x67\x1c\x9c\x89\xf4\x63\x74\x4c\x7a\x63\xfb\xf3\xfa\x51\x2b\xfb\xef\x16\x1e\x30\x31\x2f\x46\x93\xc8\x34\x99\xbf\x52\x18\xbf\xec\xbb\xb0\x8e\xcc\x81\xf7\x38\x15\x9c\x14\x14\x24\xe2\xb0\xa8\x08\x8f\x8a\x90\x47\xb2\x46\x2b\xd2\xef\x6a\x77\x49\x06\x9f\x4e\xfa\x1b\xa9\xbf\x18\xaa\xb0\xfc\x2d\xfd\x06\x33\xe3\x2e\x00\xa0\xc5\xbb\xbb\x84\xf1\x97\x2d\x6f\xbe\x7b\x37\xb8\x70\xe9\x23\x62\xec\xb8\xf7\x9f\xc8\x9d\xbb\xde\x38\xfb\x4d\xde\x66\xb3\x89\x56\x4a\xad\x84\xff\x1a\xaf\xbf\xff\x88\x59\xcd\xa3\x8f\x26\x00\x66\xb6\x32\x87\x02\x97\xa8\x17\x03\xf6\xed\xa5\x48\x12\xfb\xaf\xc5\x92\xd8\x7f\x10\xfb\xbf\x01\x00\x00\xff\xff\x72\x92\x57\x40\x21\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 11041, mode: os.FileMode(420), modTime: time.Unix(1720853854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
